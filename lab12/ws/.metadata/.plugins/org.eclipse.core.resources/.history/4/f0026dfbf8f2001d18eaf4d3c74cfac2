package uo.mp.transaction.model;

import uo.mp.transaction.model.util.IBAN;

public class CurrentAcountTransaction extends Transaction{
	
	public static final double MAX_AMOUNT = 1000.0;
	public static final String TYPE="acc";
	
	private String clientType;

	public CurrentAcountTransaction(String date, String number, double amount, String description,String type) {
		super(date, number, amount, description);
		setClientType(type);
	}

	@Override
	public void validate() {
		checkClientMoney();
		checkIban();
	}
	
	
	/**
	 * Comprueba que la cantidad gastada sea valida
	 * 
	 */
	private void checkClientMoney() {
		if (!clientType.equals("P")) {
			if(getAmount()>MAX_AMOUNT) {
				super.addFault("Supera el limite del  cliente");
			}
		}
	}
	
	private void checkIban() {
		if(!IBAN.isValid(getNumber())) {
			super.addFault("el iban es incorrecto");
		}
	}

	@Override
	public String serialize() {
		StringBuilder sb = new StringBuilder();
		sb.append(TYPE+";");
		sb.append(getDate()+";");
		sb.append(getNumber()+";");
		sb.append(getClientType()+";");
		sb.append(getAmount()+";");
		sb.append(getDescription()+";");
		return sb.toString();
	}
	
	public void setClientType(String clientType) {
		this.clientType=clientType;
	}
	
	public String getClientType() {
		return clientType;
	}

	@Override
	public Transaction clone() {
		return new CurrentAcountTransaction(getDate(), getNumber(), getAmount(), getDescription(), getClientType());
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("CurrentAcountTransaction [date=");
		builder.append(getDate());
		builder.append(", number=");
		builder.append(getNumber());
		builder.append(", clientType=");
		builder.append(getClientType());
		builder.append(", amount=");
		builder.append(getAmount());
		builder.append(", description=");
		builder.append(getDescription());
		builder.append("]");
		if(hasFaults()) {
			builder.append("\nfaults=");
			builder.append(getFaults());
		}
		return builder.toString();
	}
	
	

}
