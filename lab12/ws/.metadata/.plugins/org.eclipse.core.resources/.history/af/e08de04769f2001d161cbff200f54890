package uo.mp.transaction.validator;

import java.util.ArrayList;
import java.util.List;

import uo.mp.transaction.model.Transaction;
import uo.mp.transaction.model.exception.InvalidTransactionException;
import uo.mp.util.check.ArgumentChecks;

public class TransactionValidator {
	
	private  List<Transaction> trxs = new ArrayList<>();
	private  List<Transaction> invalidTransactions = new ArrayList<>();
	private  List<Transaction> validTransactions = new ArrayList<>();

	public void add(List<Transaction> trxs) {
		ArgumentChecks.isTrue(trxs!=null,"EL parametro no puede ser null");
		this.trxs=trxs;
	}

	public void validate() {
		for(Transaction trx:trxs) {
			if(trx.hasFaults()) {
				invalidTransactions.add(trx);
			}else {
				validTransactions.add(trx);
			}
		}
	}

	public List<Transaction> getInvalidTransactions() {
		List<Transaction> invalid = new ArrayList<>();
		for(Transaction inv:invalidTransactions) {
			invalid.add(inv.clone());
		}
		return invalid;
	}

	public List<Transaction> getValidTransactions() {
		List<Transaction> valid = new ArrayList<>();
		for(Transaction val:validTransactions) {
			valid.add(val.clone());
		}
		return valid;
	}

}
